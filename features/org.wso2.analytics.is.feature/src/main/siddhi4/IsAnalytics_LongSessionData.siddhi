@App:name("IsAnalytics_LongSessionData")
@App:description("Identifying Long Sessions and storing in a table")

-- Defining streams to handle Long Sessions
define stream periodicalTriggerStream (
triggered_time long);

define trigger periodicalTriggerStream at every 2 min;

@sink(type='log', prefix='Session Stream Info Summary')
define stream SessionStreamInfomationSummary (
triggered_time long, 
meta_tenantId int, 
sessionId string, 
startTimestamp long, 
renewTimestamp long, 
terminationTimestamp long, 
endTimestamp long, 
duration long, 
isActive bool, 
username string, 
userstoreDomain string, 
remoteIp string, 
region string, 
tenantDomain string, 
serviceProvider string, 
identityProviders string, 
rememberMeFlag bool,  
timeStamp long);

@sink(type='log', prefix='Filter sessions exceeding 15 minutes')
define stream FilterLongSessionsStreams (
meta_tenantId int, 
sessionId string, 
startTimestamp long, 
renewTimestamp long, 
terminationTimestamp long, 
endTimestamp long, 
duration long, 
username string, 
userstoreDomain string, 
tenantDomain string, 
timeStamp long);

@sink(type='log', prefix='Temporary Alert Stream for long sessions ')
define stream AlertLongSessionsTemporaryStream (
meta_tenantId int, 
tenantDomain string, 
sessionId string, 
username string, 
duration long, 
timeStamp long, 
avgDuration double);

@sink(type='log', prefix='Alert Stream for long sessions')
define stream AlertLongSessionsStream (
timeStamp long, 
meta_tenantId int, 
tenantDomain string, 
sessionId string, 
username string, 
duration long, 
avgDuration double);

@sink(type='log', prefix='Specifying the alert type whether it is a abnormal long session or suspicious login')
define stream SecurityAlertTypeStream (
meta_tenantId int, 
type string, 
tenantDomain string, 
msg string, 
severity int, 
alertTimestamp long, 
userReadableTime string);

-- Defining Databases

@primaryKey('meta_tenantId', 'sessionId') 
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table SessionInformationTable(
meta_tenantId int, 
sessionId string, 
startTimestamp long, 
renewTimestamp long, 
terminationTimestamp long, 
endTimestamp long, 
duration long, 
isActive bool, 
username string, 
userstoreDomain string, 
remoteIp string, 
region string, 
tenantDomain string, 
serviceProvider string, 
identityProviders string, 
rememberMeFlag bool, 
timeStamp long);

@primaryKey('meta_tenantId', 'tenantDomain', 'username', 'userstoreDomain') 
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table AverageSessionDurationTable(
meta_tenantId int, 
tenantDomain string, 
username string, 
userstoreDomain string, 
avgDuration double);

@primaryKey('meta_tenantId', 'sessionId') 
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table AlertLongSessionsTable(
timeStamp long, 
meta_tenantId int, 
tenantDomain string, 
sessionId string, 
username string, 
duration long, 
avgDuration double);

@primaryKey('meta_tenantId', 'type', 'tenantDomain','msg') 
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table SecurityAlertTypeTable(
meta_tenantId int, 
type string, 
tenantDomain string, 
msg string, 
severity int, 
alertTimestamp long, 
userReadableTime string);

-- Queries
-- Triggering  streams for every 2 minutes from SessionInformationTable 
from periodicalTriggerStream join SessionInformationTable
select *
insert into SessionStreamInfomationSummary;

-- Finding the average session duration
from periodicalTriggerStream join SessionInformationTable
select  meta_tenantId, 
        tenantDomain, 
        username, 
        userstoreDomain, 
        avg(duration) as avgDuration 
group by meta_tenantId, tenantDomain, username, userstoreDomain
having startTimestamp>= convert(time:dateSub(startTimestamp,7,'DAY'), 'long')
update or insert into AverageSessionDurationTable
on AverageSessionDurationTable.meta_tenantId==meta_tenantId and AverageSessionDurationTable.tenantDomain==tenantDomain and AverageSessionDurationTable.username==username and AverageSessionDurationTable.userstoreDomain==userstoreDomain ;

-- Filter long sessions exceeding 15 minutes
from SessionStreamInfomationSummary [duration > 900000 and rememberMeFlag == false and isActive == true]
select  meta_tenantId, 
        sessionId, 
        startTimestamp, 
        renewTimestamp, 
        terminationTimestamp, 
        endTimestamp, 
        duration, 
        username, 
        userstoreDomain, 
        tenantDomain, 
        timeStamp 
insert into FilterLongSessionsStreams;

-- Getting data from AverageSessionDurationTable
from FilterLongSessionsStreams as s join AverageSessionDurationTable as t
on (s.meta_tenantId == t.meta_tenantId and s.tenantDomain == t.tenantDomain and s.username == t.username and s.userstoreDomain == t.userstoreDomain)
select  s.meta_tenantId, 
        s.tenantDomain, 
        s.sessionId, 
        s.username, 
        s.duration, 
        s.timeStamp, 
        t.avgDuration
insert into AlertLongSessionsTemporaryStream;

-- Detecting abnormal long sessions
from AlertLongSessionsTemporaryStream[duration > (avgDuration * (50.0 + 100.0) / 100.0)]
select  timeStamp, 
        meta_tenantId, 
        tenantDomain, 
        sessionId, 
        username, 
        duration, 
        avgDuration
insert into AlertLongSessionsStream;

-- Sending alert type to SecurityAlertTypeStream
from AlertLongSessionsStream
select  meta_tenantId, 
        "AbnormalLongSessionAlert" as type, 
        tenantDomain, 
        str:concat('Abnormal long session session of ', duration, ' milliseconds detected by user: ', username,' on session id: ', sessionId, '.') as msg, 
        3 as severity, 
        (time:timestampInMilliseconds()) as alertTimestamp, 
        time:dateFormat((time:timestampInMilliseconds()),'yyyy-MM-dd HH:mm:ss') as userReadableTime
insert into SecurityAlertTypeStream;

--Storing abnormal long sessions in 'AlertLongSessionsTable'
from AlertLongSessionsStream
select  *
update or insert into AlertLongSessionsTable
on AlertLongSessionsTable.meta_tenantId==meta_tenantId and AlertLongSessionsTable.sessionId==sessionId;

--Storing Login alert type in 'SecurityAlertTypeTable'
from SecurityAlertTypeStream
select *
update or insert into SecurityAlertTypeTable
on SecurityAlertTypeTable.meta_tenantId==meta_tenantId and SecurityAlertTypeTable.type==type and SecurityAlertTypeTable.tenantDomain==tenantDomain and SecurityAlertTypeTable.msg==msg;

