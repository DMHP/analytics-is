@App:name("IS_Analytics_Authentication")
@App:description("Recieve analyticsd data from IS andstore store them in a database")

-- Read data from IS
@source(type = "wso2event", wso2.stream.id = "org.wso2.is.analytics.stream.OverallAuthentication:1.0.0", @map(type = 'wso2event'))

-- Stream definitions

--@sink(type='log', prefix='Login Data')
--define stream OverallAuthenticationOut(tenantId int, userName string, authStepSuccess bool);

define stream InStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string);

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define stream OverallAuthenticationProcessedStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string);

define stream countStream (meta_tenantId int, eventId string, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, successValue int, failureValue int, stepSuccessValue int, firstLoginValue int, identityProviderType string);

-- Table definitions

--@store(type='rdbms', jdbc.url='jdbc:mysql://localhost/IS_DATA_DUMP_DB?useSSL=false', username='root', password='IsAnalytics', jdbc.driver.name='com.mysql.jdbc.Driver')
@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
@primaryKey('meta_tenantId', 'contextId', 'eventId', 'eventType', 'region')
define table  OverallAuthenticationTable(meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string);

-- Aggregation Definitions

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation AuthenticationStatAggregation
from countStream
select meta_tenantId, username, localUsername, rolesCommaSeparated, serviceProvider, identityProvider, remoteIp, region, userStoreDomain, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as  authFirstSuccessCount, identityProviderType
group by meta_tenantId, username, localUsername--, rolesCommaSeparated, serviceProvider, identityProvider, remoteIp--, userStoreDomain, identityProviderType --
aggregate every second ... year;

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation UserAggregation
from countStream
select meta_tenantId, username, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as  authFirstSuccessCount, identityProviderType
group by meta_tenantId, username, identityProviderType
aggregate every second ... year;

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation LocalUsernameAggregation
from countStream
select meta_tenantId, localUsername, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, identityProviderType
group by meta_tenantId, username,identityProviderType
aggregate every second ... year;

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation IdentityProviderAggregation
from countStream
select meta_tenantId, identityProvider,sum(stepSuccessValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as  authFirstSuccessCount, identityProviderType
group by meta_tenantId, identityProvider, identityProviderType
aggregate every second ... year;

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation UserStoreAggregation
from countStream
select meta_tenantId, userStoreDomain,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, identityProviderType
group by meta_tenantId, userStoreDomain, identityProviderType
aggregate every second ... year;

/*
* TODO:
* Define a method to get duplicator functinality ato get duplicate streams for each role (RolesCommaSeparated)
*
*/

/*
define aggregation RoleAggregation
from countStream#isAnalytics:duplicator(rolesCommaSeparated)
select meta_tenantId, username, role, serviceProvider, identityProvider, remoteIp, region, userStoreDomain, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, identityProviderType
group by meta_tenantId, username, role, serviceProvider, identityProvider, remoteIp, userStoreDomain, identityProviderType
aggregate every second ... year;
*/

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation ServiceProviderAggregation
from countStream
select meta_tenantId, serviceProvider,sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as authFirstSuccessCount, identityProviderType
group by meta_tenantId, serviceProvider,identityProviderType
aggregate every second ... year;

@store(type='rdbms', datasource='IS_DATA_DUMP_DB')
define aggregation RegionAggregation
from countStream
select meta_tenantId, remoteIp, region, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, identityProviderType
group by meta_tenantId, remoteIp,identityProviderType
aggregate every second ... year;

-- Queries
/*
TODO:

IP to region mapping should be done - Currently hard-coded.

*/
from InStream
select meta_tenantId, contextId, eventId, eventType, authenticationSuccess, username, localUsername, userStoreDomain, tenantDomain, remoteIp, "South Asia" as region, inboundAuthType, serviceProvider, rememberMeEnabled, forceAuthEnabled, passiveAuthEnabled, rolesCommaSeparated, authenticationStep, identityProvider, authStepSuccess, stepAuthenticator, isFirstLogin, identityProviderType
insert into OverallAuthenticationProcessedStream;

from OverallAuthenticationProcessedStream
select meta_tenantId as meta_tenantId, contextId, eventId, eventType, authenticationSuccess, username, localUsername, userStoreDomain, tenantDomain, remoteIp, region, inboundAuthType, serviceProvider, rememberMeEnabled, forceAuthEnabled, passiveAuthEnabled, rolesCommaSeparated, authenticationStep, identityProvider, authStepSuccess, stepAuthenticator, isFirstLogin, identityProviderType
update or insert into OverallAuthenticationTable
on OverallAuthenticationTable.meta_tenantId==meta_tenantId and OverallAuthenticationTable.contextId==contextId and OverallAuthenticationTable.eventId==eventId and OverallAuthenticationTable.eventType==eventType and OverallAuthenticationTable.region==region;

from OverallAuthenticationProcessedStream
select meta_tenantId, eventId, username, localUsername, userStoreDomain, tenantDomain, remoteIp, region, inboundAuthType, serviceProvider, rememberMeEnabled, forceAuthEnabled, passiveAuthEnabled, rolesCommaSeparated, authenticationStep, identityProvider, authStepSuccess, stepAuthenticator, isFirstLogin,ifThenElse(authenticationSuccess == true, 1, 0) as successValue,ifThenElse((authStepSuccess == false and eventType == 'step'), 1, 0) as failureValue,ifThenElse((authStepSuccess == true and eventType == 'step'), 1, 0) as stepSuccessValue,ifThenElse(authenticationSuccess == true AND isFirstLogin == true, 1, 0) as firstLoginValue,identityProviderType
insert into countStream;