@App:name("IsAnalytics_SuspiciousLogin_Detection")
@App:description("Detecting suspicious login attempts and storing in a table")

--Defining Input Stream for receving streams from IS
@source(type = "wso2event", wso2.stream.id = "org.wso2.is.analytics.stream.OverallSession:1.0.0", @map(type = 'wso2event'))
define stream SourceStreamToReceiveStreamFromIdentityServer (
meta_tenantId int, 
sessionId string, 
startTimestamp long, 
renewTimestamp long, 
terminationTimestamp long, 
action int, username string, 
userstoreDomain string, 
remoteIp string, 
region string, 
tenantDomain string, 
serviceProvider string, 
identityProviders string, 
rememberMeFlag bool, 
userAgent string, 
_timestamp long);

@source(type = "wso2event", wso2.stream.id = "org.wso2.is.analytics.stream.OverallAuthentication:1.0.0", @map(type = 'wso2event'))
define stream SourceStreamToAuthenticateFromIdentityServer (
meta_tenantId int, 
contextId string, 
eventId string, 
eventType string, 
authenticationSuccess bool, 
username string, 
localUsername string, 
userStoreDomain string, 
tenantDomain string, 
remoteIp string, 
region string, 
inboundAuthType string, 
serviceProvider string, 
rememberMeEnabled bool, 
forceAuthEnabled bool, 
passiveAuthEnabled bool, 
rolesCommaSeparated string, 
authenticationStep string, 
identityProvider string, 
authStepSuccess bool, 
stepAuthenticator string, 
isFirstLogin bool, 
identityProviderType string,
_timestamp long);

@sink(type='log', prefix='Alert login attempts with same user name')
define stream LoginAlertStreamSameUsername (
meta_tenantId int, 
username string, 
severity int, 
msg string, 
tenantDomain string, 
timestamp long, 
serviceProvider string);

@sink(type='log', prefix='Login Alert Stream')
define stream SuspiciousLoginAlertStream (
meta_tenantId int, 
username string, 
severity int, 
msg string, 
tenantDomain string, 
timestamp long);

@sink(type='log', prefix='Specifying the alert type whether it is a abnormal long session or suspicious login')
define stream SecurityAlertTypeStream (
meta_tenantId int, 
type string, 
tenantDomain string, 
msg string, 
severity int, 
alertTimestamp long, 
userReadableTime string);

-- Defining Databases

@primaryKey('meta_tenantId') 
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table SuspiciousLoginAlertTable(
meta_tenantId int, 
username string, 
severity int, 
msg string, 
tenantDomain string, 
timestamp long);

@primaryKey('meta_tenantId', 'type', 'tenantDomain','msg') 
@store(type='rdbms', datasource='IS_ANALYTICS_DB')
define table SecurityAlertTypeTable(
meta_tenantId int, 
type string, 
tenantDomain string, 
msg string, 
severity int, 
alertTimestamp long, 
userReadableTime string);

--Queries

-- Detecting events from same user. An alert is generated when the first five or more login attempts are a failure and the immediate login attempt is successful
from every(e1=SourceStreamToAuthenticateFromIdentityServer) -> e2=SourceStreamToAuthenticateFromIdentityServer[authStepSuccess == false AND e1.username == e2.username AND e1.userStoreDomain == e2.userStoreDomain AND e1.tenantDomain == e2.tenantDomain]<5:> ->  e3=SourceStreamToAuthenticateFromIdentityServer[authStepSuccess == true AND e2.username == e3.username AND e2.userStoreDomain == e3.userStoreDomain AND e2.tenantDomain == e3.tenantDomain]
within 1 min
select  e2[last].meta_tenantId, 
        e2[last].username, 
        1 as severity, 
        str:concat('Successful login attempt after multiple login failures with same username detected at: ', time:dateFormat(e3[last]._timestamp,'yyyy-MM-dd HH:mm:ss'), '.') as msg, e2[last].tenantDomain, 
        e3[last]._timestamp as timestamp, 
        e2[last].serviceProvider
output first every 1 min
insert into LoginAlertStreamSameUsername;

-- Sending multiple login failures to SuspiciousLoginAlertStream
from LoginAlertStreamSameUsername
select meta_tenantId, username, severity, msg, tenantDomain, timestamp
insert into SuspiciousLoginAlertStream;

-- Sending alert type to SecurityAlertTypeStream
from LoginAlertStreamSameUsername
select  meta_tenantId, 
        "SuspiciousLoginAlert" as type, 
        tenantDomain, 
        str:concat('Successful login attempt after multiple login failures from same username: ', username, ' detected at: ', time:dateFormat(e3[last].timestamp,'yyyy-MM-dd HH:mm:ss'), '.') as msg, 
        severity, 
        (time:timestampInMilliseconds()) as alertTimestamp, 
        time:dateFormat((time:timestampInMilliseconds()),'yyyy-MM-dd HH:mm:ss') as userReadableTime
insert into SecurityAlertTypeStream;

-- Storing Multiple login failures in 'SuspiciousLoginAlertTable'
from SuspiciousLoginAlertStream
select *
update or insert into SuspiciousLoginAlertTable
on SuspiciousLoginAlertTable.meta_tenantId==meta_tenantId;

--Storing Login alert type in 'SecurityAlertTypeTable'
from SecurityAlertTypeStream
select *
update or insert into SecurityAlertTypeTable
on SecurityAlertTypeTable.meta_tenantId==meta_tenantId and SecurityAlertTypeTable.type==type and SecurityAlertTypeTable.tenantDomain==tenantDomain and SecurityAlertTypeTable.msg==msg;