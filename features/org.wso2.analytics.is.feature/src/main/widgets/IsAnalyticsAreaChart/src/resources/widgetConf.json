{
  "name": "Is Analytics Area Chart",
  "id": "IsAnalyticsAreaChart",
  "thumbnailURL": "",
  "configs": {
    "pubsub": {
      "types": [
        "subscriber",
      ]
    },
    "options": [
      {
        "id": "widgetType",
        "title": "Widget Type",
        "type": {
          "name": "ENUM",
          "possibleValues": [
            "Overall",
            "Local",
            "Federated"
          ]
        },
        "defaultValue": "Overall"
      }
    ],
    "providerConfig": {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name(\"IsAnalytics_Auth_UserRegionAuthStat\") @App:description(\"Handle Event from IS and save data in a table for Overall Authentication\") @source(type='inMemory', topic='IsAnalytics.Authentication.Common.OutputSinkFromProcessedAuthenticationDataStream', @map(type='passThrough')) define stream ProcessedAuthenticationDataStream ( meta_tenantId int,  eventId string,  username string,  localUsername string,  userStoreDomain string,  tenantDomain string,  remoteIp string,  region string,  inboundAuthType string, serviceProvider string,  rememberMeEnabled bool,  forceAuthEnabled bool,  passiveAuthEnabled bool,  rolesCommaSeparated string,  authenticationStep string,  identityProvider string,  authStepSuccess bool,  stepAuthenticator string,  isFirstLogin bool,  successValue int,  failureValue int,  stepSuccessValue int,  firstLoginValue int,  identityProviderType string ); @store(type='rdbms', datasource='IS_ANALYTICS_DB') define aggregation RegionAggregation from ProcessedAuthenticationDataStream select  meta_tenantId,  remoteIp,  region,  sum(successValue) as authSuccessCount,  sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount,  identityProviderType group by  meta_tenantId,  remoteIp, identityProviderType aggregate every second ... year;",
          "queryData": {
            "query": "from RegionAggregation {{filterCondition}} within {{from}}L, {{to}}L per \"{{per}}s\" select region, sum({{countType}}) as authSuccessCount, sum(authFailureCount) as authFailureCount group by region"
          },
          "incrementalColumn": "contextId",
          "publishingInterval": 5,
          "purgingInterval": 60,
          "publishingLimit": 30,
          "purgingLimit": 60,
          "isPurgingEnable": false
        }
      }
    }
  }
}
